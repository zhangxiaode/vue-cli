{
    "compilerOptions": {
        "target": "es5", // 指定ECMAScript目标版本
        "module": "esnext", // 指定模块代码生成
        "lib": ["esnext", "dom", "dom.iterable", "scripthost"], // 指定要包含在编译中的库文件
        "allowJs": true, // 允许编译javascript文件
        "checkJs": true, // 报告.js文件中的错误
        "jsx": "preserve", // 指定jsx代码生成
        "declaration": true, // 生成对应的’.d,.ts文件
        "sourceMap": false, // 生成相应的’。地图的文件
        // "outFile": "./", // 连接并将输出发送到单个文件
        // "outDir": "./", // 将输出结构重定向到目录
        // "rootDir": "./", // 指定输入文件的根目录。用于用——outDir控制输出目录结构
        "composite": true, // 启用项目编译
        "removeComments": true, //不向输出发出注释
        "noEmit": true, //不发出输出
        "importthelpers": true, // Import从“tslib”中释放助手
        "downlevelIteration": true, //当目标为“ES5”或“ES3”时，为“for-of”、“spread”和“destructuring”中的迭代提供完全支持
        "isolatedModules": true, // 将每个文件转换为一个单独的模块
        "moduleResolution": "node", // 指定模块解析策略
        "strict": true, // 启用所有严格的类型检查选项
        "baseUrl": ".", // 基本目录来解析非绝对模块名
        "paths": { // 一系列条目，这些条目将导入重新映射到相对于“baseUrl”的查找位置
            "@Mall/*": ["projects/mall/src/*"]
        },
        "types": ["reflect-metadata"], // 编译中包含的类型声明文件
        "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块进行默认导入。这并不影响代码发出，只影响类型查询
        "esModuleInterop": true, // 通过为所有导入创建名称空间对象，支持CommonJS和ES模块之间的互操作性
        "emitDecoratorMetadata": true, // 启用了对为decorator发出类型元数据的实验性支持
        "noImplicitAny": false, // 对隐含的“any”类型的表达式和声明提出错误
        "importHelpers": true, // Import从“tslib”中释放助手
        "experimentalDecorators": true, // 允许注解语法
        "skipLibCheck": true // 对库定义文件跳过类型检查（2.0 以上）
    },
    "exclude": ["node_modules", "dist"] // 用于表示 ts 排除的文件
}